// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("AUTH_POSTGRES_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

// Enum definitions
enum Visibility {
  public
  private
}

enum Kind {
  text
  code
  image
}

// Models
model User {
  id            String          @id @default(uuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  password      String?
  ethereum      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]
  subscriptions Subscription[]
  credits       Credit[]
  chats         Chat[]
  documents     Document[]
  suggestions   Suggestion[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  @@id([userId, credentialID])
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tier      String
  active    Boolean  @default(false)
  expiresAt DateTime
}

model Credit {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount    Int
  expiresAt DateTime
}

model VerificationRequest {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Chat {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  title      String
  userId     String
  visibility Visibility @default(private)
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages   Message[]
  votes      Vote[]
}

model Message {
  id        String   @id @default(uuid())
  chatId    String
  role      String
  content   Json
  createdAt DateTime @default(now())
  chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  votes     Vote[]
}

model Vote {
  chatId    String
  messageId String
  isUpvoted Boolean
  chat      Chat    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  message   Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@id([chatId, messageId])
}

model Document {
  id          String       @id @unique @default(uuid())
  createdAt   DateTime     @default(now())
  title       String
  content     String?
  kind        Kind         @default(text)
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  suggestions Suggestion[]

  @@unique([id, createdAt])
}

model Suggestion {
  id                String   @id @default(uuid())
  documentId        String
  documentCreatedAt DateTime
  originalText      String
  suggestedText     String
  description       String?
  isResolved        Boolean  @default(false)
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  document          Document @relation(fields: [documentId, documentCreatedAt], references: [id, createdAt], onDelete: Cascade)
  createdAt         DateTime @default(now())
}
